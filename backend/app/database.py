import os
import time
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Database URL - ajustada para funcionar no Docker
DATABASE_URL = os.getenv("DATABASE_URL", "mysql+pymysql://user:password@db:3306/app_db")

# Configura√ß√£o do engine com retry e configura√ß√µes de pool
def create_db_engine():
    max_retries = 10
    retry_delay = 5
    
    for attempt in range(max_retries):
        try:
            engine = create_engine(
                DATABASE_URL, 
                echo=True,
                pool_pre_ping=True,  # Verifica conex√µes antes de usar
                pool_recycle=3600,   # Recicla conex√µes ap√≥s 1 hora
                pool_size=10,        # N√∫mero de conex√µes no pool
                max_overflow=20      # M√°ximo de conex√µes extras
            )
            
            # Testa a conex√£o
            with engine.connect() as conn:
                from sqlalchemy import text
                conn.execute(text("SELECT 1"))
                
            logger.info("‚úÖ Conex√£o com banco de dados estabelecida com sucesso")
            return engine
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  Tentativa {attempt + 1}/{max_retries} de conex√£o falhou: {e}")
            if attempt < max_retries - 1:
                logger.info(f"üîÑ Tentando novamente em {retry_delay} segundos...")
                time.sleep(retry_delay)
            else:
                logger.error("‚ùå Falha ao conectar ao banco ap√≥s todas as tentativas")
                raise

# Criar engine e session
try:
    engine = create_db_engine()
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    logger.info("üîó Engine e SessionLocal configurados")
except Exception as e:
    logger.error(f"‚ùå Erro cr√≠tico ao configurar banco de dados: {e}")
    raise

Base = declarative_base()

def get_db():
    """Dependency que fornece uma sess√£o do banco de dados"""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"Erro na sess√£o do banco: {e}")
        db.rollback()
        raise
    finally:
        db.close() 